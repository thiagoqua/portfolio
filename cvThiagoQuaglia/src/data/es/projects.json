[
  {
    "projectId": 11,
    "projectName": "Convertidor de YouTube a MP3 & WAV",
    "githubLink": "https://github.com/thiagoqua/ytConverter",
    "description": "Esta plataforma web permite descargar de manera sencilla e intuitiva el audio de vídeos de YouTube en formatos <i class='accent'>MP3</i> y <i class='accent'>WAV</i>. Se hizo uso de la librería <a href='https://www.npmjs.com/package/ytdl-core' target='_blank'>ytdl-core</a> para obtener el bitstream del video y, para su conversión a los formatos <i class='accent'>MP3</i> y <i class='accent'>WAV</i>, se integró <a href='https://www.npmjs.com/package/fluent-ffmpeg' target='_blank'>fluent-ffmpeg</a>, una librería que se apoya en la herramienta <i class='accent'>FFMPEG</i> para realizarlo.<br/>Dado que <i class='accent'>FFMPEG</i> debe estar presente en el servidor, opté por dockerizar el backend. De esta manera, se garantiza que la herramienta esté disponible, facilitando la conversión de audio sin inconvenientes.",
    "techUsed": [
      "Angular",
      "Express",
      "Docker",
      "FFMPEG"
    ],
    "langUsed": ["TypeScript"],
    "demo":"https://youtconverter.netlify.app/"
  },
  {
    "projectId": 10,
    "projectName": "Aplicación Android para registrar compras con tarjeta",
    "githubLink": "",
    "description": "",
    "techUsed": [],
    "langUsed": [],
    "developing":true
  },
  {
    "projectId": 9,
    "projectName": "Aplicación Android para gestión de asegurados",
    "githubLink": "https://github.com/thiagoqua/InsuranceMobileApp.git",
    "description": "Esta app permite consumir algunos de los endpoints que provee la <a href='/es/project/7'>API de seguros</a>. <br/>Una vez logueado el ususario administrador, va a poder visualizar todos los asegurados con opciones de filtrado y ver sus respectivos detalles, de una manera bastante sencilla y comprensiva. <br/> App construida utilizando el patrón de diseño <i class='accent'>MVVM</i> (Model-View-ViewModel).",
    "techUsed": [
      "JetPack Compose",
      "Navigation Compose",
      "Peticiones HTTP con Retrofit",
      "Inyección de Dependencias con Hilt"
    ],
    "langUsed": ["Kotlin"],
    "demo":"https://easyupload.io/t7xfpv",
    "snapshot":"https://drive.google.com/drive/folders/17-NL_Q-ChvSKyQnJbV_rbyzC-3jeucVb?usp=sharing"
  },
  {
    "projectId": 8,
    "projectName": "Sistema web para gestión de asegurados",
    "githubLink": "https://github.com/thiagoqua/InsuranceWebApp",
    "description": "Este sistema consta de una interfaz visual web consumiendo la <a href='/es/project/7'>API de seguros</a>. Los demás usos de la API en otros proyectos están descriptos allí. <br/>Una vez logueado el usuario administrador, va a poder utilizar <i class='accent'>todas</i> las funciones disponibles en la API, dentro de las cuales se encuentran la vista de todos los clientes, el alta, baja y modificación de los mismos de manera individual, la importación masiva a través de un archivo Excel y la exportación de los registros en formato PDF o Excel también.<br/>Cabe aclarar que la interfaz no es responsive al 100% ya que para vista desde teléfonos está realizada la <a href='/es/project/9'>app mobile</a>. De todas formas, se adapta correctamente a cualquier tipo de pantalla de PC o tablet.",
    "techUsed": ["Angular"],
    "langUsed": ["TypeScript","HTML","CSS"],
    "demo":"https://insurancesweb.netlify.app/"
  },
  {
    "projectId": 7,
    "projectName": "API para seguros",
    "githubLink": "https://github.com/thiagoqua/InsuranceAPI",
    "description": "Esta API permite hacer consultas de todo tipo a la base de datos de los clientes de una compañía de seguros.<br/> Su acceso está restringido únicamente a <i class='accent'>usuarios administradores</i>, o sea, los propietarios de la compañía u oficina de seguros. Por lo tanto, por temas de seguridad, la API no contiene endpoints que permitan la inserión de usuarios administradores al sistema. <br/>Más allá de las operaciones CRUD, permite la <i class='accent'>importación</i> masiva de datos de asegurados a partir de un archivo Excel, cumpliendo con el formato especificado <a href='https://github.com/thiagoqua/InsuranceAPI#structure-of-the-excel-file-to-parse' target='_blank'>aquí</a>, simplificando el proceso de carga de información.<br/>También permite la generación de <i class='accent'>reportes</i>, tanto en formatos PDF como XLSX, a partir de la exportación de los registros de la base de datos.<br/>Este proyecto es parte de un conjunto de proyectos relacionados, que incluye una <a href='/es/project/8'>interfaz web frontend</a> y una <a href='/es/project/9'>aplicación mobil Android</a>, brindando una solución integral y obviamente consumiendo de esta API.<br/> API construida utilizando el patrón de diseño <i class='accent'>MVC</i> (Model-View-Controller).",
    "techUsed": [
      "ASP.NET",
      ".NET Framework",
      "Docker",
      "Microservicios",
      "Rest API",
      "Swagger UI"
    ],
    "langUsed": ["C#"],
    "databaseUsed": "SQL Server",
    "demo":"https://insurance-api-v2.onrender.com/swagger/index.html"
  },
  {
    "projectId": 6,
    "projectName": "Renta de autos",
    "githubLink": "https://github.com/thiagoqua/RentalCarApp",
    "description": "Tanto el apartado frontend como backend se encuentran en el directorio raíz de GitHub. <br /> El sistema cuenta con dos roles de usuario: rol adminisitrador y rol cliente. <br /> Un usuario <i class='accent'>cliente</i> podrá ver la galería de autos que posee la empresa y rentar el que desee con el previo registro y logueo en el sistema. Además, tendrá un apartado donde ver su historial de rentas con la opción de cancelar aquellas que estén vigentes. <br /> Un usuario <i class='accent'>administrador</i> podrá confirmar o negar desde su interfaz el pago del cliente para así validar la renta o cancelarla respectivamente. <br /> Todo el proyecto se encuentra <i class='accent'>dockerizado</i>. Obligatoriamente la base de datos debe ser corrida en Docker exclusivamente para facilidad del usuario que prueba el sistema. <br /> Luego, tiene la opción de correr el frontend y el backend con Node y Java respectivamente si posee dichos intérpretes instalados. De lo contrario, puede correr ambos en containers aislados.<br/> API construida utilizando el patrón de diseño <i class='accent'>MVC</i> (Model-View-Controller).",
    "techUsed": [
      "SpringBoot",
      "React",
      "Docker",
      "Microservicios",
      "Rest API",
      "Swagger UI"
    ],
    "langUsed": ["JAVA", "HTML", "CSS", "TypeScript"],
    "databaseUsed": "MySQL"
  },
  {
    "projectId": 5,
    "projectName": "Portfolio",
    "githubLink": "https://github.com/thiagoqua/portfolio",
    "description": "Portafolio minimalista que ofrece una presentación de mis habilidades, proyectos y trayectoria personal. Optimizado para una navegación intuitiva y fácil.",
    "techUsed": [
      "Astro"
    ],
    "langUsed": ["TypeScript","HTML", "CSS"]
  },
  {
    "projectId": 4,
    "projectName": "Aplicación de turnos médicos",
    "githubLink": "https://github.com/thiagoqua/TurnosMedicos",
    "description": "Tanto la versión web como la de escritorio se encuentran en la misma solución y en el mismo repositorio de GitHub. <br /> <br /> El sistema cuenta con dos roles de usuarios: rol de paciente y rol de médico. <br /> Un usuario <i class='accent'>paciente</i> podrá sacar turnos, visualizarlos con sus revspectivos detalles y eliminarlos. El sistema le permitirá emitir un reporte PDF con el listado de todos sus turnos sacados vigentes. <br /> Un usuario <i class='accent'>médico</i> podrá definir su disponibilidad en cada sucursal de la compañía médica, modificarla, eliminarla y ver los turnos que los pacientes tienen con él/ella en un día determinado. El sistema le permitirá emitir un reporte PDF con el listado de todos los turnos vigentes que los pacientes tienen con el médico en cuestión para una fecha en específico. <br /> <br /> La estructura está pensada para que el sanatorio (o ente que use el sistema) trabaje con obras sociales, brindándoles éstas acceso a una base de datos o un listado donde se encuentran todos los pacientes afiliados a dicha obra social. <br /> Debido a que ésto no está implementado, la creación de los usuarios primero debe hacerse de manera manual a la DB, insertando a la tabla <i class='accent'>afiliados</i> los datos necesarios para proceder al registro del paciente. <br /> Una realizado, ya se puede continuar con el registro del usuario desde el apartado <i class='accent'>registrarse</i> del sistema. <br /> Cabe aclarar que el sistema solo permite registros de ésta manera para pacientes. Para agregar médicos, se tiene que hacer de manera manual a la DB insertando primero en la tabla <i class='accent'>afiliados</i>, luego en la tabla <i class='accent'>usuarios</i> y por último en la tabla <i class='accent'>medico</i> con los datos correspondientes.",
    "techUsed": [".NET", "ASP.NET", "LINQ to SQL"],
    "langUsed": ["C#", "ASPX", "CSS"],
    "databaseUsed": "SQL Server"
  },
  {
    "projectId": 3,
    "projectName": "Página web para tienda de ropa",
    "githubLink": "https://github.com/estebantosoni/TiendaDigital",
    "description": "Tanto el apartado backend como frontend se encuentran en distintos directorios pero en el mismo repositorio subido a GitHub. <br /> <br /> El sistema cuenta con dos roles de usuarios: rol de administrador y rol de cliente. Pero a su vez, cualquier persona sin registrarse también podrá ser capaz de ver el contenido de la página. <br /> Un usuario <i class='accent'>sin loguearse</i> podrá ver todos los productos que tiene disponible la tienda, con opciones de filtrado. <br /> Un usuario <i class='accent'>cliente</i> logueado, podrá ver todos los productos que tiene disponible la tienda agregando de la posibilidad de utilizar una lista de favoritos, donde podrá ir agregando los items que más le interesa de la tienda y luego poder verlos con un solo click. <br /> Un usuario <i class='accent'>administrador</i> podrá agregar prendas y/o perfumes al catálogo web, quitarlos o modificarlos.<br/> API construida utilizando el patrón de diseño <i class='accent'>MVC</i> (Model-View-Controller).",
    "techUsed": ["SpringBoot", "Angular", "Rest API"],
    "langUsed": ["JAVA", "HTML", "CSS", "TypeScript"],
    "databaseUsed": "MySQL"
  },
  {
    "projectId": 2,
    "projectName": "Juego de truco",
    "githubLink": "https://github.com/thiagoqua/envido",
    "description": "Este juego no tiene ningún tipo de logueo ni registro, ya que fue entregado como final de una de las primeras materias de la carrera. <br /> <br /> En el apartado <i class='accent'>configuración</i>, podremos poner nuestro nombre de usuario a la hora de jugar. <br /> <br /> También cuenta con una aplicación de mensajería, donde podremos chatear con otra computadora que esté corriendo el programa poniendo su dirección IP. <br /> Este ultimo apartado fue desarrollado debido a que uno de los requerimientos del trabajo final era utilizar sockets en JAVA. La idea original era la de realizar una versión online para el juego del truco, pero debido a la falta de tiempo improvisamos realizando un chat.",
    "langUsed": ["JAVA"]
  },
  {
    "projectId": 1,
    "projectName": "Imitación del protocolo FTP",
    "githubLink": "https://github.com/thiagoqua/FTPredes",
    "description": "Este proyecto fue realizado para el final de la materia <i class='accent'>Redes de computadoras</i>. <br /> <br /> El fin era desarrollar un protocolo similar al funcionamiento del <i class='accent'>File Transfer Protocol</i> para lograr comprenderlo. <br /> Posee implementados una pequeña cantidad de comandos que básicamente permiten pedir la transferencia de archivos, listar los archivos de un directorio y cambiar de directorio en el servidor.",
    "langUsed": ["C"]
  }
]
